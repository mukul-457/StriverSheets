public class BinaryKthElementOfTwo {
    public static void main(String[] args) {
        int[] arr1 = {45, 47, 47, 49, 51, 51, 52, 55, 55, 55, 56, 57, 58, 63, 65, 70, 71, 72, 72, 74, 75, 75, 76, 76, 78, 78, 80, 83, 83, 85, 87, 87, 90, 92, 93, 93, 96, 97, 97, 98, 98, 98, 99, 103, 104, 105, 106, 109, 111, 111, 113, 115, 118, 121, 123, 124, 124, 128, 130, 130, 132, 133, 134, 135, 136, 137, 137, 139, 139, 139, 139, 140, 141, 141, 141, 146, 147, 150, 151, 153, 157, 159, 160, 163, 164, 170, 173, 173, 174, 176, 179, 180, 182, 184, 186, 187, 188, 193, 194, 194, 195, 197, 197, 199, 202, 205, 206, 206, 207, 208, 211, 212, 212, 212, 214, 216, 216, 217, 219, 224, 224, 224, 225, 226, 231, 233, 235, 236, 237, 241, 252, 253, 256, 265, 267, 270, 275, 275, 276, 281, 286, 287, 288, 289, 290, 292, 296, 299, 302, 303, 304, 306, 310, 313, 315, 326, 327, 328, 329, 332, 332, 339, 340, 340, 343, 343, 344, 346, 353, 353, 354, 358, 358, 359, 364, 367, 370, 373, 376, 378, 378, 378, 382, 382, 386, 389, 391, 393, 395, 396, 403, 404, 405, 406, 407, 408, 410, 410, 412, 414, 415, 419, 419, 423, 424, 425, 426, 430, 431, 434, 442, 443, 443, 443, 448, 450, 452, 453, 453, 455, 455, 460, 463, 465, 468, 472, 472, 473, 474, 477, 478, 478, 480, 480, 486, 490, 491, 492, 495, 496, 499, 499, 502, 509, 512, 513, 513, 515, 522, 523, 526, 526, 528, 531, 534, 535, 536, 541, 547, 547, 549, 553, 555, 556, 559, 560, 561, 562, 563, 566, 566, 568, 569, 570, 571, 572, 573, 574, 574, 579, 581, 584, 584, 589, 592, 593, 596, 599, 600, 602, 602, 604, 604, 608, 612, 612, 613, 618, 619, 620, 622, 624, 624, 625, 627, 631, 634, 637, 640, 643, 647, 649, 649, 650, 652, 653, 653, 654, 655, 655, 656, 660, 662, 662, 663, 665, 665, 671, 676, 677, 680, 680, 681, 685, 686, 690, 692, 692, 694, 695, 696, 701, 702, 706, 707, 709, 719, 719, 722, 722, 723, 725, 729, 729, 730, 734, 736, 736, 740, 741, 742, 743, 744, 746, 746, 748, 750, 751, 751, 759, 766, 768, 769, 770, 770, 775, 778, 779, 781, 781, 782, 782, 784, 785, 786, 786, 793, 794, 795, 796, 797, 798, 802, 805, 807, 808, 812, 816, 818, 825, 825, 825, 826, 829, 833, 835, 836, 839, 839, 841, 843, 844, 846, 846, 849, 850, 854, 855, 857, 858, 861, 861, 862, 862, 865, 866, 867, 880, 882, 885, 888, 890, 890, 890, 890, 891, 894, 894, 897, 902, 903, 904, 907, 908, 909, 911, 917, 918, 920, 921, 924, 924, 926, 933, 935, 944, 946, 947, 951, 951, 952, 956, 957, 958, 958, 958, 959, 961, 961, 962, 963, 965, 965, 967, 971, 973, 977, 977, 981, 991, 993, 993, 994, 1001, 1001, 1003, 1010, 1010, 1013, 1014, 1017, 1021, 1023, 1025, 1030, 1031, 1032, 1034, 1035};
        int[] arr2 = {42, 43, 44, 50, 52, 55, 58, 58, 59, 63, 65, 70, 73, 77, 79, 80, 80, 81, 84, 85, 86, 86, 88, 92, 93, 98, 110, 115, 118, 118, 120, 120, 122, 124, 124, 129, 141, 141, 144, 147, 149, 150, 153, 157, 158, 162, 167, 168, 170, 176, 178, 181, 181, 183, 185, 189, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 214, 215, 220, 221, 222, 223, 225, 225, 227, 229, 234, 234, 236, 238, 239, 239, 240, 243, 248, 248, 251, 253, 255, 255, 255, 259, 259, 261, 263, 266, 268, 268, 272, 272, 275, 278, 280, 281, 281, 283, 285, 286, 287, 288, 290, 290, 298, 301, 302, 307, 309, 309, 312, 312, 314, 315, 315, 317, 320, 326, 327, 327, 331, 341, 341, 345, 348, 350, 351, 353, 355, 357, 358, 367, 371, 374, 376, 379, 382, 382, 382, 388, 392, 394, 397, 400, 401, 401, 404, 407, 407, 408, 409, 410, 417, 422, 422, 424, 432, 434, 441, 448, 449, 455, 457, 457, 461, 462, 463, 463, 464, 465, 467, 470, 471, 476, 476, 478, 479, 480, 481, 486, 488, 493, 496, 497, 503, 503, 504, 505, 506, 510, 523, 524, 525, 531, 533, 535, 535, 535, 543, 546, 546, 548, 548, 552, 553, 559, 559, 560, 560, 562, 563, 563, 567, 569, 571, 573, 573, 574, 575, 579, 583, 584, 586, 587, 592, 593, 595, 597, 597, 598, 599, 600, 605, 606, 607, 607, 611, 611, 611, 614, 616, 618, 618, 622, 627, 628, 631, 632, 632, 634, 635, 635, 637, 637, 641, 641, 643, 645, 646, 649, 653, 658, 660, 665, 668, 669, 674, 674, 677, 678, 678, 682, 685, 689, 694, 699, 702, 702, 705, 707, 707, 708, 709, 710, 711, 712, 713, 713, 718, 718, 718, 719, 720, 726, 728, 731, 739, 747, 754, 756, 756, 757, 757, 758, 760, 760, 764, 765, 768, 770, 772, 776, 777, 778, 779, 779, 780, 782, 784, 790, 790, 791, 792, 793, 793, 796, 798, 802, 807, 814, 814, 815, 818, 818, 819, 824, 825, 826, 827, 829, 831, 834, 842, 843, 846, 848, 849, 851, 852, 855, 861, 862, 863, 864, 864, 865, 866, 869, 875, 878, 883, 887, 890, 893, 894, 895, 897, 898, 900, 907, 908, 914, 915, 918, 921, 927, 931, 933, 936, 939, 940, 942, 942, 947, 948, 951, 951, 958, 959, 959, 964, 967, 968, 969, 971, 974, 975, 977, 979, 987, 990, 990, 990, 994, 995, 996, 1006, 1006, 1006, 1007, 1007, 1019, 1023, 1030, 1036, 1037};
        BKE sol  = new BKE();
        System.out.println(sol.kthElement(833, arr1, arr2));
    }
}   



class BKE {
    public long kthElement(int k, int arr1[], int arr2[]) {
        
        int l1 = 0, l2 = 0 , h1 = arr1.length-1, h2 = arr2.length-1;
        int lefts = k-1;

        while (lefts > 0){
            int mid1 = (l1+h1)/2;
            int mid2 = (l2+h2)/2;
            int count1 = l1<= h1 ? mid1-l1+1: 0;
            int count2 = l2 <= h2 ? mid2-l2+1: 0;
            if (count1 + count2 <= lefts){
                if(l1<=h1 && (mid2 >= arr2.length-1 || (mid1 < arr1.length && arr1[mid1] <= arr2[mid2+1]))){
                    lefts -= count1;
                    l1 = mid1+1;
                }
                if(l2<=h2 && (mid1 >= arr1.length-1 || (mid2 < arr2.length && arr2[mid2] <= arr1[mid1+1]))){
                    lefts -= count2;
                    l2 = mid2+1;
                }
            
            }else{
                if(l2<=h2 && l1<= h1){
                    if (arr1[mid1] >= arr2[mid2]){
                        h1 = mid1-1;
                    }else{
                        h2 = mid2-1;
                    }
                }else  if (l1 <= h1){
                    h1 = mid1-1;
                }else{
                    h2= mid2-1;
                }
            }

        }
        if(l1< arr1.length && l2< arr2.length){
            return Math.min(arr1[l1], arr2[l2]);
        }else if (l1< arr1.length){
            return arr1[l1];
        }
        return arr2[l2];

    }
}